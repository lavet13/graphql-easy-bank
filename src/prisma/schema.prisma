// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователя
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  loans     Loan[]
  comments  Comment[] @relation("UserComments")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  financialHistory FinancialHistory[]
  bankAccounts     BankAccount[]

  @@map("users")
}

// Модель финансовой истории пользователя
model FinancialHistory {
  id          String  @id @default(uuid())
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  income      Decimal @db.Money
  expenses    Decimal @db.Money
  creditScore Int     @db.SmallInt

  // Другие релевантные поля
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("financial_histories")
}

// Модель банковского счета пользователя
model BankAccount {
  id            String      @id @default(uuid())
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?
  accountNumber String      @unique
  accountType   AccountType // Используем перечисление AccountType
  // Другие релевантные поля
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("bank_accounts")
}

// Модель кредита
model Loan {
  id           Int               @id @default(autoincrement())
  amount       Float
  term         Int // Срок в месяцах
  interestRate Float
  user         User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId       String?
  status       LoanStatus        @default(PENDING)
  comment      Comment?
  calculation  LoanCalculation[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("loans")
}

// Модель комментария
model Comment {
  id        String   @id @default(uuid())
  text      String
  user      User?     @relation("UserComments", fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  loan      Loan?     @relation(fields: [loanId], references: [id], onDelete: SetNull)
  loanId    Int?      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

// Модель расчета кредита
model LoanCalculation {
  id           String   @id @default(uuid())
  totalPayment Float
  loan         Loan     @relation(fields: [loanId], references: [id], onDelete: Cascade)
  loanId       Int
  createdAt    DateTime @default(now())

  @@index([loanId])
}

// Роли пользователя
enum Role {
  USER
  ADMIN
}

// Статусы кредита
enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  PAID
  DEFAULTED
}

// Добавляем новое перечисление AccountType
enum AccountType {
  SAVINGS
  CHECKING
  CREDIT
}
