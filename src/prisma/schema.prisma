// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователя
model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  loans     Loan[]
  comments  Comment[] @relation("UserComments")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  financialHistory FinancialHistory[]
  bankAccounts     BankAccount[]

  @@map("users")
}

// Модель финансовой истории пользователя
model FinancialHistory {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  income      Float
  expenses    Float
  creditScore Int

  // Другие релевантные поля
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("financial_histories")
}

// Модель банковского счета пользователя
model BankAccount {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  accountNumber String   @unique
  accountType   AccountType // Используем перечисление AccountType
  // Другие релевантные поля
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("bank_accounts")
}

// Модель кредита
model Loan {
  id           String           @id @default(uuid())
  amount       Float
  term         Int // Срок в месяцах
  interestRate Float
  user         User             @relation(fields: [userId], references: [id])
  userId       String
  status       LoanStatus       @default(PENDING)
  comments     Comment[]        @relation("LoanComments")
  calculation  LoanCalculation?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("loans")
}

// Модель комментария
model Comment {
  id        String   @id @default(uuid())
  text      String
  user      User?    @relation("UserComments", fields: [userId], references: [id])
  userId    String?
  loan      Loan?    @relation("LoanComments", fields: [loanId], references: [id])
  loanId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

// Модель расчета кредита
model LoanCalculation {
  id           String @id @default(uuid())
  totalPayment Float // Итоговая сумма выплат
  loan         Loan   @relation(fields: [loanId], references: [id])
  loanId       String @unique
}

// Роли пользователя
enum Role {
  USER
  ADMIN
}

// Статусы кредита
enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  PAID
  DEFAULTED
}

// Добавляем новое перечисление AccountType
enum AccountType {
  SAVINGS
  CHECKING
  CREDIT
}
